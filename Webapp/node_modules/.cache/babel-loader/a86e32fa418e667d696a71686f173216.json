{"ast":null,"code":"var _jsxFileName = \"/Users/cosmos/Desktop/embed/webapp/src/App.js\";\nimport React, { Component } from \"react\";\nimport Info from \"./components/Information/Info\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchPotState = () => {\n      fetch('http://18.134.242.125:8000' + \"/pot\").then(res => res.json()).then(res => {\n        console.log(res);\n        const {\n          data,\n          humidity,\n          tempurature,\n          lightness,\n          weight,\n          rHumidity,\n          speaker,\n          motot,\n          waterpump1,\n          waterpump2,\n          isPotConnected\n        } = res;\n        this.setState({\n          data,\n          humidity,\n          tempurature,\n          lightness,\n          weight,\n          rHumidity,\n          speaker,\n          motot,\n          waterpump1,\n          waterpump2,\n          isPotConnected\n        });\n      });\n    };\n\n    this.state = {\n      isServerConnected: false,\n      isPotConnected: false,\n      humidity: 10,\n      tempurature: 20,\n      lightness: 0,\n      weight: 0,\n      rHumidity: 0,\n      speaker: 0,\n      motor: 0,\n      waterpump1: 0,\n      waterpump2: 0,\n      humidityValue: 0,\n      data: [{\n        name: 'Page A',\n        uv: 400,\n        pv: 2400,\n        amt: 2400\n      }, {\n        name: 'Page B',\n        uv: 600,\n        pv: 2400,\n        amt: 2400\n      }, {\n        name: 'Page C',\n        uv: 800,\n        pv: 2400,\n        amt: 2400\n      }]\n    };\n  }\n\n  componentDidMount() {\n    // check if server is online\n    fetch('http://18.134.242.125:8000' + \"/check\").then(res => {\n      if (res.status == 200) {\n        console.log(\"server is online\");\n        this.setState({\n          isServerConnected: true\n        });\n      }\n    }).catch(err => console.log(err));\n    this.fetchPotState();\n    const timeInterval = 200;\n    this.timer = setInterval(() => {\n      this.fetchPotState();\n    }, timeInterval);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Hex Future\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(Info, {\n          data: this.state.data,\n          isServerConnected: this.state.isServerConnected,\n          isPotConnected: this.state.isPotConnected,\n          humidity: this.state.humidity,\n          tempurature: this.state.tempurature,\n          lightness: this.state.lightness,\n          weight: this.state.weight,\n          rHumidity: this.state.rHumidity,\n          speaker: this.state.speaker,\n          motor: this.state.motor,\n          waterpump1: this.state.waterpump1,\n          waterpump2: this.state.waterpump2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom\",\n        children: \"@2022 Imperial College London EEE/EIE HexFuture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/cosmos/Desktop/embed/webapp/src/App.js"],"names":["React","Component","Info","App","constructor","props","fetchPotState","fetch","then","res","json","console","log","data","humidity","tempurature","lightness","weight","rHumidity","speaker","motot","waterpump1","waterpump2","isPotConnected","setState","state","isServerConnected","motor","humidityValue","name","uv","pv","amt","componentDidMount","status","catch","err","timeInterval","timer","setInterval","render"],"mappings":"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","sourcesContent":["import React,{ Component } from \"react\"\nimport Info from \"./components/Information/Info\"\nimport \"./App.css\"\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isServerConnected: false,\n      isPotConnected: false,\n      humidity:10,\n      tempurature:20,\n      lightness:0,\n      weight:0,\n      rHumidity:0,\n      speaker:0,\n      motor:0,\n      waterpump1:0,\n      waterpump2:0,\n      humidityValue:0,\n      data: [{name: 'Page A', uv: 400, pv: 2400, amt: 2400},\n      {name: 'Page B', uv: 600, pv: 2400, amt: 2400},\n      {name: 'Page C', uv: 800, pv: 2400, amt: 2400}]\n\n    }\n  }\n\n  fetchPotState = () => {\n    fetch('http://18.134.242.125:8000'+ \"/pot\")\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res)\n        const {data,humidity, tempurature,lightness,weight,rHumidity,speaker,motot,waterpump1,waterpump2,isPotConnected} = res\n        this.setState({data,humidity, tempurature,lightness,weight,rHumidity,speaker,motot,waterpump1,waterpump2,isPotConnected})\n      })\n  }\n\n\n  componentDidMount() {\n    // check if server is online\n    fetch('http://18.134.242.125:8000' + \"/check\")\n      .then((res) => {\n        if (res.status == 200) {\n          console.log(\"server is online\")\n          this.setState({ isServerConnected: true })\n        }\n      })\n      .catch((err) => console.log(err))\n\n    this.fetchPotState()\n    const timeInterval = 200\n    this.timer = setInterval(() => {\n      this.fetchPotState()\n    }, timeInterval)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"title\">Hex Future</h1>\n\n        \n        <div className=\"row\">\n          <Info\n                data = {this.state.data}\n                isServerConnected = {this.state.isServerConnected}\n                isPotConnected = {this.state.isPotConnected}\n                humidity = {this.state.humidity}\n                tempurature= {this.state.tempurature}\n                lightness= {this.state.lightness}\n                weight= {this.state.weight}\n                rHumidity= {this.state.rHumidity}\n                speaker= {this.state.speaker}\n                motor= {this.state.motor}\n                waterpump1= {this.state.waterpump1}\n                waterpump2= {this.state.waterpump2}\n          />\n        </div>\n        <div className=\"bottom\">@2022 Imperial College London EEE/EIE HexFuture</div>\n      </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}