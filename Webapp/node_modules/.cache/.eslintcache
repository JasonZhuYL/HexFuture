[{"/Users/cosmos/Desktop/embed/webapp/src/index.js":"1","/Users/cosmos/Desktop/embed/webapp/src/App.js":"2","/Users/cosmos/Desktop/embed/webapp/src/components/Information/Info.jsx":"3"},{"size":220,"mtime":1644405130926,"results":"4","hashOfConfig":"5"},{"size":2330,"mtime":1646050472670,"results":"6","hashOfConfig":"5"},{"size":4988,"mtime":1646153717180,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ffqmbu",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/cosmos/Desktop/embed/webapp/src/index.js",[],[],"/Users/cosmos/Desktop/embed/webapp/src/App.js",["20","21","22","23"],[],"import React,{ Component } from \"react\"\nimport Info from \"./components/Information/Info\"\nimport \"./App.css\"\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isServerConnected: false,\n      isPotConnected: false,\n      humidity:10,\n      tempurature:20,\n      lightness:0,\n      weight:0,\n      rHumidity:0,\n      speaker:0,\n      motor:0,\n      waterpump1:0,\n      waterpump2:0,\n      humidityValue:0,\n      humidityValue: []\n\n    }\n  }\n\n  fetchPotState = () => {\n    fetch('http://18.134.242.125:8000'+ \"/pot\")\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res)\n        const {humidityValue,humidity, tempurature,lightness,weight,rHumidity,speaker,motot,waterpump1,waterpump2,isPotConnected} = res\n        this.setState({humidityValue,humidity, tempurature,lightness,weight,rHumidity,speaker,motot,waterpump1,waterpump2,isPotConnected})\n      })\n  }\n\n\n  componentDidMount() {\n    // check if server is online\n    fetch('http://18.134.242.125:8000' + \"/check\")\n      .then((res) => {\n        if (res.status == 200) {\n          console.log(\"server is online\")\n          this.setState({ isServerConnected: true })\n        }\n      })\n      .catch((err) => console.log(err))\n\n    this.fetchPotState()\n    const timeInterval = 200\n    this.timer = setInterval(() => {\n      this.fetchPotState()\n    }, timeInterval)\n  }\n\n  render() {\n    return (\n      <div className=\"bo\">\n        <h1 className=\"title\">Hex Future</h1>\n\n        \n        <div className=\"row\">\n          <Info\n                humidityValue = {this.state.humidityValue}\n                isServerConnected = {this.state.isServerConnected}\n                isPotConnected = {this.state.isPotConnected}\n                humidity = {this.state.humidity}\n                tempurature= {this.state.tempurature}\n                lightness= {this.state.lightness}\n                weight= {this.state.weight}\n                rHumidity= {this.state.rHumidity}\n                speaker= {this.state.speaker}\n                motor= {this.state.motor}\n                waterpump1= {this.state.waterpump1}\n                waterpump2= {this.state.waterpump2}\n          />\n        </div>\n        <div className=\"bottom\">@2022 Imperial College London EEE/EIE HexFuture</div>\n      </div>\n    )\n  }\n}\n\n",["24","25"],"/Users/cosmos/Desktop/embed/webapp/src/components/Information/Info.jsx",["26","27","28"],[],"import React, { Component } from \"react\"\nimport \"./Info.css\"\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\n\nexport default class Info extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      type: -1\n    }\n    this.changeType = this.changeType.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.sendCommand = this.sendCommand.bind(this)\n  }\n\n  changeType = (event) => {\n    const type = parseInt(event.target.value)\n    console.log(type)\n    this.setState({ type })\n    console.log(this.state)\n    this.handleSubmit()\n  }\n\n  handleSubmit = (event) => {\n    //event.preventDefault()\n    const type = this.state\n    if (type !== -1) {\n      let type_ready = { type: type }\n      this.sendCommand(type_ready)\n      console.log(type_ready)\n    } else {\n      //console.err(\"unknown submission\")\n    }\n  }\n\n  sendCommand = (command) => {\n    fetch('http://18.134.242.125:8000' + \"/\" + 'type', {\n      method: \"POST\",\n      body: JSON.stringify(command),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.warn(error)\n        }\n      )\n  }\n\n\n\n  render() {\n    let { humidityValue,isServerConnected,isPotConnected,humidity, tempurature,lightness,weight,rHumidity,motor,waterpump1,waterpump2} = this.props\n    return (\n      <table className=\"pad info\">\n        <thead>\n          <tr>\n            <th colSpan=\"2\"><font color='white'>Connection State</font></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Server:</td>\n            <td>{isServerConnected ? \"connected\" : \"disconnected\"}</td>\n          </tr>\n          <tr>\n            <td>Pot:</td>\n            <td>{isPotConnected ? \"connected\" : \"disconnected\"}</td>\n          </tr>\n        </tbody>\n\n        <thead>          \n          <tr>\n            <th colSpan=\"2\"><font color='white'>Plant Type</font></th>\n          </tr></thead>\n        <tbody>\n        <tr>\n            <td>Type:&nbsp;</td>\n            <td>\n                <select name=\"type\" onChange={this.changeType} width={60} height={30} className='selectbar'>\n                    <option value=\"0\">Tête à tête</option>\n                    <option value=\"1\">Alstroemerias</option>\n                    <option value=\"2\">Aster</option>\n                    <option value=\"3\">Calla Lilies</option>\n                    <option value=\"4\">Dahlias</option>\n                    <option value=\"5\">Daisies</option>\n                    <option value=\"6\">Daffodil</option>\n                    <option value=\"7\">Delphinium</option>\n                    <option value=\"8\">Gerbera Daisies</option>\n                    <option value=\"9\">Lavender</option>\n                    <option value=\"10\">Lilies</option>\n                    <option value=\"11\">Marigold</option>\n                    <option value=\"12\">Peonies</option>\n                    <option value=\"13\">More to come</option>\n                </select>\n            </td>\n          </tr>\n        </tbody>\n        <thead>\n          <tr>\n            <th colSpan=\"2\"><font color='white'>Pot Sensor Reading</font></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Dirt humidity:</td>\n            <td>{humidity}</td>\n          </tr>\n          <tr>\n            <td>Air Tempurature:</td>\n            <td>{tempurature}</td>\n          </tr>\n          \n          <tr>\n            <td>Air Humidity:</td>\n            <td>{rHumidity}%</td>\n          </tr>\n          <tr>\n            <td>Sunlight Intensity:</td>\n            <td>{lightness} lux</td>\n          </tr>\n          <tr>\n            <td>Water Supply:</td>\n            <td>{weight}</td>\n          </tr>\n\n        </tbody>\n        <thead>\n          <tr>\n            <th colSpan=\"2\"><font color='white'>Utility State</font></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Gear and Motor:</td>\n            <td>{motor ? \"Operating\" : \"Stopped\"}</td>\n          </tr>\n          <tr>\n            <td>Water Pump:</td>\n            <td>{waterpump1 ? \"Operating\" : \"Stopped\"}</td>\n          </tr>\n        </tbody>\n        <thead>\n          <tr>\n            <th colSpan=\"2\"><font color='white'>Real-time Dirt Humidity / %</font></th>\n          </tr>\n        </thead>\n        <thead>\n          <tr className='chart'>\n          <LineChart width={700} height={500} data={humidityValue} background=\"white\">\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#000000\" strokeWidth={3}/>\n            <CartesianGrid stroke=\"#ccc\" /> \n            <XAxis dataKey=\"name\" />\n            <YAxis/>\n          </LineChart>\n          </tr>\n        </thead>\n\n      </table>\n      \n    )\n  }\n}\n",{"ruleId":"29","severity":1,"message":"30","line":22,"column":7,"nodeType":"31","messageId":"32","endLine":22,"endColumn":20},{"ruleId":"33","severity":1,"message":"34","line":28,"column":39,"nodeType":"35","messageId":"36","endLine":28,"endColumn":40},{"ruleId":"33","severity":1,"message":"34","line":40,"column":40,"nodeType":"35","messageId":"36","endLine":40,"endColumn":41},{"ruleId":"37","severity":1,"message":"38","line":42,"column":24,"nodeType":"35","messageId":"32","endLine":42,"endColumn":26},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"33","severity":1,"message":"34","line":37,"column":40,"nodeType":"35","messageId":"36","endLine":37,"endColumn":41},{"ruleId":"33","severity":1,"message":"34","line":37,"column":46,"nodeType":"35","messageId":"36","endLine":37,"endColumn":47},{"ruleId":"43","severity":1,"message":"44","line":61,"column":124,"nodeType":"45","messageId":"46","endLine":61,"endColumn":134},"no-dupe-keys","Duplicate key 'humidityValue'.","ObjectExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '===' and instead saw '=='.","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'waterpump2' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]